"use strict";
exports.id = 526;
exports.ids = [526];
exports.modules = {

/***/ 80526:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

// ESM COMPAT FLAG
__webpack_require__.r(__webpack_exports__);

// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  "command": () => (/* reexport */ command)
});

// EXTERNAL MODULE: ./node_modules/tsafe/esm/exclude.mjs
var exclude = __webpack_require__(83101);
// EXTERNAL MODULE: ./dist/bin/shared/promptKeycloakVersion.js
var promptKeycloakVersion = __webpack_require__(82635);
// EXTERNAL MODULE: ./dist/bin/shared/constants.js
var constants = __webpack_require__(173);
// EXTERNAL MODULE: ./dist/bin/tools/SemVer.js
var SemVer = __webpack_require__(12171);
// EXTERNAL MODULE: ./node_modules/tsafe/esm/assert.mjs + 1 modules
var assert = __webpack_require__(29041);
// EXTERNAL MODULE: external "fs"
var external_fs_ = __webpack_require__(57147);
// EXTERNAL MODULE: external "path"
var external_path_ = __webpack_require__(71017);
// EXTERNAL MODULE: external "child_process"
var external_child_process_ = __webpack_require__(32081);
// EXTERNAL MODULE: ./node_modules/chalk/source/index.js
var source = __webpack_require__(78818);
var source_default = /*#__PURE__*/__webpack_require__.n(source);
// EXTERNAL MODULE: ./node_modules/chokidar/index.js
var chokidar = __webpack_require__(42677);
// EXTERNAL MODULE: ./node_modules/powerhooks/tools/waitForDebounce.js
var tools_waitForDebounce = __webpack_require__(18721);
// EXTERNAL MODULE: ./dist/bin/tools/getThisCodebaseRootDirPath.js
var getThisCodebaseRootDirPath = __webpack_require__(58822);
// EXTERNAL MODULE: ./dist/bin/tools/getAbsoluteAndInOsFormatPath.js
var getAbsoluteAndInOsFormatPath = __webpack_require__(84794);
// EXTERNAL MODULE: ./node_modules/cli-select/dist/index.js
var dist = __webpack_require__(99398);
var dist_default = /*#__PURE__*/__webpack_require__.n(dist);
// EXTERNAL MODULE: ./node_modules/run-exclusive/lib/runExclusive.js
var runExclusive = __webpack_require__(81708);
// EXTERNAL MODULE: ./dist/bin/tools/extractArchive.js
var extractArchive = __webpack_require__(29121);
// EXTERNAL MODULE: ./node_modules/evt/tools/Deferred.js
var Deferred = __webpack_require__(50689);
;// CONCATENATED MODULE: ./dist/bin/start-keycloak/appBuild.js








(0,assert/* assert */.h)();
async function appBuild(params) {
    const { buildContext } = params;
    switch (buildContext.bundler) {
        case "vite":
            return appBuild_vite({ buildContext });
        case "webpack":
            return appBuild_webpack({ buildContext });
    }
}
async function appBuild_vite(params) {
    const { buildContext } = params;
    (0,assert/* assert */.h)(buildContext.bundler === "vite");
    const dIsSuccess = new Deferred.Deferred();
    console.log(source_default().blue("$ npx vite build"));
    const child = external_child_process_.spawn("npx", ["vite", "build"], {
        cwd: buildContext.projectDirPath,
        shell: true
    });
    child.stdout.on("data", data => {
        if (data.toString("utf8").includes("gzip:")) {
            return;
        }
        process.stdout.write(data);
    });
    child.stderr.on("data", data => process.stderr.write(data));
    child.on("exit", code => dIsSuccess.resolve(code === 0));
    const isSuccess = await dIsSuccess.pr;
    return { isAppBuildSuccess: isSuccess };
}
async function appBuild_webpack(params) {
    var _a;
    const { buildContext } = params;
    (0,assert/* assert */.h)(buildContext.bundler === "webpack");
    const entries = Object.entries(((_a = JSON.parse(external_fs_.readFileSync(buildContext.packageJsonFilePath).toString("utf8"))
        .scripts) !== null && _a !== void 0 ? _a : {})).filter(([, scriptCommand]) => scriptCommand.includes("keycloakify build"));
    if (entries.length === 0) {
        console.log(source_default().red([
            `You should have a script in your package.json at ${(0,external_path_.relative)(process.cwd(), (0,external_path_.dirname)(buildContext.packageJsonFilePath))}`,
            `that includes the 'keycloakify build' command`
        ].join(" ")));
        process.exit(-1);
    }
    const entry = entries.length === 1
        ? entries[0]
        : entries.find(([scriptName]) => scriptName === "build-keycloak-theme");
    if (entry === undefined) {
        console.log(source_default().red("There's multiple candidate script for building your app, name one 'build-keycloak-theme'"));
        process.exit(-1);
    }
    const [scriptName, scriptCommand] = entry;
    const { appBuildSubCommands } = (() => {
        const appBuildSubCommands = [];
        for (const subCmd of scriptCommand.split("&&").map(s => s.trim())) {
            if (subCmd.includes("keycloakify build")) {
                break;
            }
            appBuildSubCommands.push(subCmd);
        }
        return { appBuildSubCommands };
    })();
    if (appBuildSubCommands.length === 0) {
        console.log(source_default().red(`Your ${scriptName} script should look like "... && keycloakify build ..."`));
        process.exit(-1);
    }
    let commandCwd = (0,external_path_.dirname)(buildContext.packageJsonFilePath);
    for (const subCommand of appBuildSubCommands) {
        const dIsSuccess = new Deferred.Deferred();
        const [command, ...args] = subCommand.split(" ");
        if (command === "cd") {
            const [pathIsh] = args;
            commandCwd = (0,getAbsoluteAndInOsFormatPath/* getAbsoluteAndInOsFormatPath */.c)({
                pathIsh,
                cwd: commandCwd
            });
            continue;
        }
        console.log(source_default().blue(`$ ${subCommand}`));
        const child = external_child_process_.spawn(command, args, {
            cwd: commandCwd,
            env: Object.assign(Object.assign({}, process.env), { PATH: (() => {
                    var _a;
                    const separator = external_path_.sep === "/" ? ":" : ";";
                    return [
                        (0,external_path_.join)((0,external_path_.dirname)(buildContext.packageJsonFilePath), "node_modules", ".bin"),
                        ...((_a = process.env.PATH) !== null && _a !== void 0 ? _a : "").split(separator)
                    ].join(separator);
                })() }),
            shell: true
        });
        child.stdout.on("data", data => process.stdout.write(data));
        child.stderr.on("data", data => process.stderr.write(data));
        child.on("exit", code => dIsSuccess.resolve(code === 0));
        const isSuccess = await dIsSuccess.pr;
        if (!isSuccess) {
            return { isAppBuildSuccess: false };
        }
    }
    return { isAppBuildSuccess: true };
}
//# sourceMappingURL=appBuild.js.map
;// CONCATENATED MODULE: ./dist/bin/start-keycloak/keycloakifyBuild.js





(0,assert/* assert */.h)();
async function keycloakifyBuild(params) {
    const { buildForKeycloakMajorVersionNumber, buildContext } = params;
    const dResult = new Deferred.Deferred();
    console.log(source_default().blue("$ npx keycloakify build"));
    const child = external_child_process_.spawn("npx", ["keycloakify", "build"], {
        cwd: buildContext.projectDirPath,
        env: Object.assign(Object.assign({}, process.env), { [constants/* BUILD_FOR_KEYCLOAK_MAJOR_VERSION_ENV_NAME */.ac]: `${buildForKeycloakMajorVersionNumber}` }),
        shell: true
    });
    child.stdout.on("data", data => process.stdout.write(data));
    child.stderr.on("data", data => process.stderr.write(data));
    child.on("exit", code => dResult.resolve({ isSuccess: code === 0 }));
    const { isSuccess } = await dResult.pr;
    return { isKeycloakifyBuildSuccess: isSuccess };
}
//# sourceMappingURL=keycloakifyBuild.js.map
// EXTERNAL MODULE: ./dist/bin/tools/isInside.js
var isInside = __webpack_require__(90665);
// EXTERNAL MODULE: ./dist/bin/tools/fs.existsAsync.js
var fs_existsAsync = __webpack_require__(43765);
// EXTERNAL MODULE: ./dist/bin/tools/fs.rm.js
var fs_rm = __webpack_require__(8699);
// EXTERNAL MODULE: ./dist/bin/tools/downloadAndExtractArchive.js
var downloadAndExtractArchive = __webpack_require__(38367);
;// CONCATENATED MODULE: ./dist/bin/start-keycloak/start-keycloak.js






















async function command(params) {
    var _a, _b, _c, _d, _e;
    exit_if_docker_not_installed: {
        let commandOutput = undefined;
        try {
            commandOutput = (_a = external_child_process_.execSync("docker --version", {
                stdio: ["ignore", "pipe", "ignore"]
            })) === null || _a === void 0 ? void 0 : _a.toString("utf8");
        }
        catch (_f) { }
        if ((commandOutput === null || commandOutput === void 0 ? void 0 : commandOutput.includes("Docker")) || (commandOutput === null || commandOutput === void 0 ? void 0 : commandOutput.includes("podman"))) {
            break exit_if_docker_not_installed;
        }
        console.log([
            `${source_default().red("Docker required.")}`,
            `Install it with Docker Desktop: ${source_default().bold.underline("https://www.docker.com/products/docker-desktop/")}`,
            `(or any other way)`
        ].join(" "));
        process.exit(1);
    }
    exit_if_docker_not_running: {
        let isDockerRunning;
        try {
            external_child_process_.execSync("docker info", { stdio: "ignore" });
            isDockerRunning = true;
        }
        catch (_g) {
            isDockerRunning = false;
        }
        if (isDockerRunning) {
            break exit_if_docker_not_running;
        }
        console.log([
            `${source_default().red("Docker daemon is not running.")}`,
            `Please start Docker Desktop and try again.`
        ].join(" "));
        process.exit(1);
    }
    const { cliCommandOptions, buildContext } = params;
    const { dockerImageTag } = await (async () => {
        if (cliCommandOptions.keycloakVersion !== undefined) {
            return { dockerImageTag: cliCommandOptions.keycloakVersion };
        }
        if (buildContext.startKeycloakOptions.dockerImage !== undefined) {
            return {
                dockerImageTag: buildContext.startKeycloakOptions.dockerImage.tag
            };
        }
        console.log([
            source_default().cyan("On which version of Keycloak do you want to test your theme?"),
            source_default().gray("You can also explicitly provide the version with `npx keycloakify start-keycloak --keycloak-version 25.0.2` (or any other version)")
        ].join("\n"));
        const { keycloakVersion } = await (0,promptKeycloakVersion/* promptKeycloakVersion */.s)({
            startingFromMajor: 18,
            excludeMajorVersions: [22],
            doOmitPatch: true,
            buildContext
        });
        console.log(`→ ${keycloakVersion}`);
        return { dockerImageTag: keycloakVersion };
    })();
    const keycloakMajorVersionNumber = (() => {
        if (buildContext.startKeycloakOptions.dockerImage === undefined) {
            return SemVer/* SemVer.parse */.h.parse(dockerImageTag).major;
        }
        const { tag } = buildContext.startKeycloakOptions.dockerImage;
        const [wrap] = [18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28]
            .map(majorVersionNumber => ({
            majorVersionNumber,
            index: tag.indexOf(`${majorVersionNumber}`)
        }))
            .filter(({ index }) => index !== -1)
            .sort((a, b) => a.index - b.index);
        if (wrap === undefined) {
            console.warn(source_default().yellow(`Could not determine the major Keycloak version number from the docker image tag ${tag}. Assuming 25`));
            return 25;
        }
        return wrap.majorVersionNumber;
    })();
    {
        const { isAppBuildSuccess } = await appBuild({
            buildContext
        });
        if (!isAppBuildSuccess) {
            console.log(source_default().red(`App build failed, exiting. Try building your app (e.g 'npm run build') and see what's wrong.`));
            process.exit(1);
        }
        const { isKeycloakifyBuildSuccess } = await keycloakifyBuild({
            buildForKeycloakMajorVersionNumber: keycloakMajorVersionNumber,
            buildContext
        });
        if (!isKeycloakifyBuildSuccess) {
            console.log(source_default().red(`Keycloakify build failed, exiting. Try running 'npx keycloakify build' and see what's wrong.`));
            process.exit(1);
        }
    }
    const jarFilePath = external_fs_.readdirSync(buildContext.keycloakifyBuildDirPath)
        .filter(fileBasename => fileBasename.endsWith(".jar"))
        .map(fileBasename => (0,external_path_.join)(buildContext.keycloakifyBuildDirPath, fileBasename))
        .sort((a, b) => external_fs_.statSync(b).mtimeMs - external_fs_.statSync(a).mtimeMs)[0];
    (0,assert/* assert */.h)(jarFilePath !== undefined);
    const extensionJarFilePaths = await Promise.all(buildContext.startKeycloakOptions.extensionJars.map(async (extensionJar) => {
        switch (extensionJar.type) {
            case "path": {
                (0,assert/* assert */.h)(await (0,fs_existsAsync/* existsAsync */.o)(extensionJar.path), `${extensionJar.path} does not exist`);
                return extensionJar.path;
            }
            case "url": {
                const { archiveFilePath } = await (0,downloadAndExtractArchive/* downloadAndExtractArchive */.I)({
                    cacheDirPath: buildContext.cacheDirPath,
                    fetchOptions: buildContext.fetchOptions,
                    url: extensionJar.url,
                    uniqueIdOfOnArchiveFile: "no extraction",
                    onArchiveFile: async () => { }
                });
                return archiveFilePath;
            }
        }
        (0,assert/* assert */.h)(false);
    }));
    const getRealmJsonFilePath_defaultForKeycloakMajor = (keycloakMajorVersionNumber) => (0,external_path_.join)((0,getThisCodebaseRootDirPath/* getThisCodebaseRootDirPath */.e)(), "src", "bin", "start-keycloak", `myrealm-realm-${keycloakMajorVersionNumber}.json`);
    const realmJsonFilePath = await (async () => {
        if (cliCommandOptions.realmJsonFilePath !== undefined) {
            if (cliCommandOptions.realmJsonFilePath === "none") {
                return undefined;
            }
            return (0,getAbsoluteAndInOsFormatPath/* getAbsoluteAndInOsFormatPath */.c)({
                pathIsh: cliCommandOptions.realmJsonFilePath,
                cwd: process.cwd()
            });
        }
        if (buildContext.startKeycloakOptions.realmJsonFilePath !== undefined) {
            (0,assert/* assert */.h)(await (0,fs_existsAsync/* existsAsync */.o)(buildContext.startKeycloakOptions.realmJsonFilePath), `${(0,external_path_.relative)(process.cwd(), buildContext.startKeycloakOptions.realmJsonFilePath)} does not exist`);
            return buildContext.startKeycloakOptions.realmJsonFilePath;
        }
        const internalFilePath = await (async () => {
            const defaultFilePath = getRealmJsonFilePath_defaultForKeycloakMajor(keycloakMajorVersionNumber);
            if (external_fs_.existsSync(defaultFilePath)) {
                return defaultFilePath;
            }
            console.log(`${source_default().yellow(`Keycloakify do not have a realm configuration for Keycloak ${keycloakMajorVersionNumber} yet.`)}`);
            console.log(source_default().cyan("Select what configuration to use:"));
            const dirPath = (0,external_path_.dirname)(defaultFilePath);
            const { value } = await dist_default()({
                values: [
                    ...external_fs_.readdirSync(dirPath)
                        .filter(fileBasename => fileBasename.endsWith(".json")),
                    "none"
                ]
            }).catch(() => {
                process.exit(-1);
            });
            if (value === "none") {
                return undefined;
            }
            return (0,external_path_.join)(dirPath, value);
        })();
        if (internalFilePath === undefined) {
            return undefined;
        }
        const filePath = (0,external_path_.join)(buildContext.cacheDirPath, (0,external_path_.basename)(internalFilePath));
        external_fs_.writeFileSync(filePath, Buffer.from(external_fs_.readFileSync(internalFilePath)
            .toString("utf8")
            .replace(/keycloakify\-starter/g, buildContext.themeNames[0])), "utf8");
        return filePath;
    })();
    add_test_user_if_missing: {
        if (realmJsonFilePath === undefined) {
            break add_test_user_if_missing;
        }
        const realm = JSON.parse(external_fs_.readFileSync(realmJsonFilePath).toString("utf8"));
        if (realm.users !== undefined) {
            break add_test_user_if_missing;
        }
        const realmJsonFilePath_internal = (() => {
            const filePath = getRealmJsonFilePath_defaultForKeycloakMajor(keycloakMajorVersionNumber);
            if (!external_fs_.existsSync(filePath)) {
                return getRealmJsonFilePath_defaultForKeycloakMajor(25);
            }
            return filePath;
        })();
        const users = JSON.parse(external_fs_.readFileSync(realmJsonFilePath_internal).toString("utf8")).users;
        realm.users = users;
        external_fs_.writeFileSync(realmJsonFilePath, JSON.stringify(realm, null, 2), "utf8");
    }
    async function extractThemeResourcesFromJar() {
        await (0,extractArchive/* extractArchive */.N)({
            archiveFilePath: jarFilePath,
            onArchiveFile: async ({ relativeFilePathInArchive, writeFile }) => {
                if ((0,isInside/* isInside */.V)({ dirPath: "theme", filePath: relativeFilePathInArchive })) {
                    await writeFile({
                        filePath: (0,external_path_.join)(buildContext.keycloakifyBuildDirPath, relativeFilePathInArchive)
                    });
                }
            }
        });
    }
    {
        const destDirPath = (0,external_path_.join)(buildContext.keycloakifyBuildDirPath, "theme");
        if (await (0,fs_existsAsync/* existsAsync */.o)(destDirPath)) {
            await (0,fs_rm.rm)(destDirPath, { recursive: true });
        }
    }
    await extractThemeResourcesFromJar();
    const jarFilePath_cacheDir = (0,external_path_.join)(buildContext.cacheDirPath, (0,external_path_.basename)(jarFilePath));
    external_fs_.copyFileSync(jarFilePath, jarFilePath_cacheDir);
    try {
        external_child_process_.execSync(`docker rm --force ${constants/* CONTAINER_NAME */.sv}`, {
            stdio: "ignore"
        });
    }
    catch (_h) { }
    const DEFAULT_PORT = 8080;
    const port = (_c = (_b = cliCommandOptions.port) !== null && _b !== void 0 ? _b : buildContext.startKeycloakOptions.port) !== null && _c !== void 0 ? _c : DEFAULT_PORT;
    const SPACE_PLACEHOLDER = "SPACE_PLACEHOLDER_xKLmdPd";
    const dockerRunArgs = [
        `-p${SPACE_PLACEHOLDER}${port}:8080`,
        `--name${SPACE_PLACEHOLDER}${constants/* CONTAINER_NAME */.sv}`,
        `-e${SPACE_PLACEHOLDER}KEYCLOAK_ADMIN=admin`,
        `-e${SPACE_PLACEHOLDER}KEYCLOAK_ADMIN_PASSWORD=admin`,
        ...(buildContext.startKeycloakOptions.dockerExtraArgs.length === 0
            ? []
            : [
                buildContext.startKeycloakOptions.dockerExtraArgs.join(SPACE_PLACEHOLDER)
            ]),
        ...(realmJsonFilePath === undefined
            ? []
            : [
                `-v${SPACE_PLACEHOLDER}"${realmJsonFilePath}":/opt/keycloak/data/import/myrealm-realm.json`
            ]),
        `-v${SPACE_PLACEHOLDER}"${jarFilePath_cacheDir}":/opt/keycloak/providers/keycloak-theme.jar`,
        ...extensionJarFilePaths.map(jarFilePath => `-v${SPACE_PLACEHOLDER}"${jarFilePath}":/opt/keycloak/providers/${(0,external_path_.basename)(jarFilePath)}`),
        ...(keycloakMajorVersionNumber <= 20
            ? [`-e${SPACE_PLACEHOLDER}JAVA_OPTS=-Dkeycloak.profile=preview`]
            : []),
        ...[
            ...buildContext.themeNames,
            ...(external_fs_.existsSync((0,external_path_.join)(buildContext.keycloakifyBuildDirPath, "theme", "account-v1"))
                ? ["account-v1"]
                : [])
        ]
            .map(themeName => ({
            localDirPath: (0,external_path_.join)(buildContext.keycloakifyBuildDirPath, "theme", themeName),
            containerDirPath: `/opt/keycloak/themes/${themeName}`
        }))
            .map(({ localDirPath, containerDirPath }) => `-v${SPACE_PLACEHOLDER}"${localDirPath}":${containerDirPath}:rw`),
        ...buildContext.environmentVariables
            .map(({ name }) => ({ name, envValue: process.env[name] }))
            .map(({ name, envValue }) => envValue === undefined ? undefined : { name, envValue })
            .filter((0,exclude/* exclude */.D)(undefined))
            .map(({ name, envValue }) => `--env${SPACE_PLACEHOLDER}${name}='${envValue.replace(/'/g, "'\\''")}'`),
        `${(_e = (_d = buildContext.startKeycloakOptions.dockerImage) === null || _d === void 0 ? void 0 : _d.reference) !== null && _e !== void 0 ? _e : "quay.io/keycloak/keycloak"}:${dockerImageTag}`,
        "start-dev",
        ...(21 <= keycloakMajorVersionNumber && keycloakMajorVersionNumber < 24
            ? ["--features=declarative-user-profile"]
            : []),
        ...(realmJsonFilePath === undefined ? [] : ["--import-realm"]),
        ...(buildContext.startKeycloakOptions.keycloakExtraArgs.length === 0
            ? []
            : [
                buildContext.startKeycloakOptions.keycloakExtraArgs.join(SPACE_PLACEHOLDER)
            ])
    ];
    console.log(source_default().blue([
        `$ docker run \\`,
        ...dockerRunArgs
            .map(arg => arg.replace(new RegExp(SPACE_PLACEHOLDER, "g"), " "))
            .map((line, i, arr) => `    ${line}${arr.length - 1 === i ? "" : " \\"}`)
    ].join("\n")));
    const child = external_child_process_.spawn("docker", ["run", ...dockerRunArgs.map(line => line.split(SPACE_PLACEHOLDER)).flat()], { shell: true });
    child.stdout.on("data", data => process.stdout.write(data));
    child.stderr.on("data", data => process.stderr.write(data));
    child.on("exit", process.exit);
    const srcDirPath = (0,external_path_.join)(buildContext.projectDirPath, "src");
    {
        const kcHttpRelativePath = (() => {
            const match = buildContext.startKeycloakOptions.dockerExtraArgs
                .join(" ")
                .match(/KC_HTTP_RELATIVE_PATH=([^ ]+)/);
            if (match === null) {
                return undefined;
            }
            return match[1];
        })();
        const handler = async (data) => {
            if (!data.toString("utf8").includes("Listening on: http://0.0.0.0:8080")) {
                return;
            }
            child.stdout.off("data", handler);
            await new Promise(resolve => setTimeout(resolve, 1000));
            console.log([
                "",
                `The ftl files from ${source_default().bold(`.${external_path_.sep}${(0,external_path_.relative)(process.cwd(), (0,external_path_.join)(buildContext.keycloakifyBuildDirPath, "theme"))}`)} are mounted in the Keycloak container.`,
                "",
                `Keycloak Admin console: ${source_default().cyan.bold(`http://localhost:${port}${kcHttpRelativePath !== null && kcHttpRelativePath !== void 0 ? kcHttpRelativePath : ""}`)}`,
                `- user:     ${source_default().cyan.bold("admin")}`,
                `- password: ${source_default().cyan.bold("admin")}`,
                "",
                "",
                `${source_default().green("Your theme is accessible at:")}`,
                `${source_default().green("➜")} ${source_default().cyan.bold((() => {
                    const url = new URL("https://my-theme.keycloakify.dev");
                    if (port !== DEFAULT_PORT) {
                        url.searchParams.set("port", `${port}`);
                    }
                    if (kcHttpRelativePath !== undefined) {
                        url.searchParams.set("kcHttpRelativePath", kcHttpRelativePath);
                    }
                    return url.href;
                })())}`,
                "",
                "You can login with the following credentials:",
                `- username: ${source_default().cyan.bold("testuser")}`,
                `- password: ${source_default().cyan.bold("password123")}`,
                "",
                `Watching for changes in ${source_default().bold(`.${external_path_.sep}${(0,external_path_.relative)(process.cwd(), buildContext.projectDirPath)}`)}`
            ].join("\n"));
        };
        child.stdout.on("data", handler);
    }
    {
        const runFullBuild = runExclusive.build(async () => {
            console.log(source_default().cyan("Detected changes in the theme. Rebuilding ..."));
            const { isAppBuildSuccess } = await appBuild({
                buildContext
            });
            if (!isAppBuildSuccess) {
                return;
            }
            const { isKeycloakifyBuildSuccess } = await keycloakifyBuild({
                buildForKeycloakMajorVersionNumber: keycloakMajorVersionNumber,
                buildContext
            });
            if (!isKeycloakifyBuildSuccess) {
                return;
            }
            await extractThemeResourcesFromJar();
            console.log(source_default().green("Theme rebuilt and updated in Keycloak."));
        });
        const { waitForDebounce } = (0,tools_waitForDebounce/* waitForDebounceFactory */.z)({ delay: 400 });
        chokidar.watch([
            srcDirPath,
            buildContext.publicDirPath,
            (0,external_path_.join)(buildContext.projectDirPath, "package.json"),
            (0,external_path_.join)(buildContext.projectDirPath, "vite.config.ts"),
            (0,external_path_.join)(buildContext.projectDirPath, "vite.config.js"),
            (0,external_path_.join)(buildContext.projectDirPath, "index.html"),
            (0,external_path_.join)((0,getThisCodebaseRootDirPath/* getThisCodebaseRootDirPath */.e)(), "src")
        ], {
            ignoreInitial: true
        })
            .on("all", async (...[, filePath]) => {
            console.log(`Detected changes in ${filePath}`);
            await waitForDebounce();
            runFullBuild();
        });
    }
}
//# sourceMappingURL=start-keycloak.js.map
;// CONCATENATED MODULE: ./dist/bin/start-keycloak/index.js

//# sourceMappingURL=index.js.map

/***/ }),

/***/ 90665:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "V": () => (/* binding */ isInside)
/* harmony export */ });
/* harmony import */ var path__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(71017);
/* harmony import */ var path__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(path__WEBPACK_IMPORTED_MODULE_0__);

function isInside(params) {
    const { dirPath, filePath } = params;
    return !(0,path__WEBPACK_IMPORTED_MODULE_0__.relative)(dirPath, filePath).startsWith("..");
}
//# sourceMappingURL=isInside.js.map

/***/ })

};
;